syntax on
syntax enable

"t_Co, 直接在ubuntu中没问题，但是在secureCRT中，设置这项，有的插件的颜色有问题
set t_Co=256
set nocp
filetype plugin on

set nu


"-------------开始vundle
set nocompatible        "关闭VI兼容模式
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()  

Plugin 'gmarik/Vundle.vim' 
Plugin 'jiangmiao/auto-pairs'
Plugin 'vimgdb'
Plugin 'gprof.vim'
Plugin 'valgrind.vim'
Plugin 'SuperTab' 
Bundle 'scrooloose/nerdtree'
Plugin 'pwdstatus.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vimgrep.vim'
call vundle#end()   

"Plugin 'scrooloose/syntastic'
filetype plugin indent on

"------------- 结束vundle



set autoindent          "自动缩进
set hlsearch            "搜索时高亮显示找到的文本

set ai 
set si 
set cindent 
set showmatch 

set expandtab
set smarttab
set shiftwidth=4
set tabstop=4           " 设定tab长度为4

set nocscopeverbose


"colorscheme inkopt

func! CompileGcc()
    exec "w"
    let compilecmd="!gcc "
    let compileflag="-o %< "
    if search("mpi\.h") != 0
        let compilecmd = "!mpicc "
    endif
    if search("glut\.h") != 0
        let compileflag .= " -lglut -lGLU -lGL "
    endif
    if search("cv\.h") != 0
        let compileflag .= " -lcv -lhighgui -lcvaux "
    endif
    if search("omp\.h") != 0
        let compileflag .= " -fopenmp "
    endif
    if search("math\.h") != 0
        let compileflag .= " -lm "
    endif
    exec compilecmd." % ".compileflag
endfunc
func! CompileGpp()
    exec "w"
    let compilecmd="!g++ "
    let compileflag="-o %< "
    if search("mpi\.h") != 0
        let compilecmd = "!mpic++ "
    endif
    if search("glut\.h") != 0
        let compileflag .= " -lglut -lGLU -lGL "
    endif
    if search("cv\.h") != 0
        let compileflag .= " -lcv -lhighgui -lcvaux "
    endif
    if search("omp\.h") != 0
        let compileflag .= " -fopenmp "
    endif
    if search("math\.h") != 0
        let compileflag .= " -lm "
    endif
    exec compilecmd." % ".compileflag
endfunc

func! RunPython()
    exec "!python %"
endfunc
func! CompileJava()
    exec "!javac %"
endfunc


func! CompileCode()
    exec "w"
    if &filetype == "cpp"
        exec "call CompileGpp()"
    elseif &filetype == "c"
        exec "call CompileGcc()"
    elseif &filetype == "python"
        exec "call RunPython()"
    elseif &filetype == "java"
        exec "call CompileJava()"
    endif
endfunc

func! RunResult()
    exec "w"
    if search("mpi\.h") != 0
        exec "!mpirun -np 4 ./%<"
    elseif &filetype == "cpp"
        exec "! ./%<"
    elseif &filetype == "c"
        exec "! ./%<"
    elseif &filetype == "python"
        exec "call RunPython"
    elseif &filetype == "java"
        exec "!java %<"
    endif
endfunc

map <F5> :call CompileCode()<CR>
imap <F5> <ESC>:call CompileCode()<CR>
vmap <F5> <ESC>:call CompileCode()<CR>

map <F6> :call RunResult()<CR>


set cmdheight=1      "设置命令行的高度

" 获取当前路径，将$HOME转化为~
"function! CurDir()
"    let curdir = substitute(getcwd(), $HOME, "~", "g")
"    return curdir
"endfunction
"set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \|%=\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\ \".&fenc)}

set nowrapscan       "禁止在搜索到文件两端时重新搜索

set autochdir

"括号自动补全
"inoremap ( ()<ESC>i
"inoremap [ []<ESC>i
"inoremap { {<CR>}<ESC>kA<CR>
"inoremap " ""<ESC>i
"noremap < <><ESC>i     "补全<引起麻烦，小于号也补全，c++的<<也补全

"cs add cscope.out
"set cscopequickfix=s-,c-,d-,i-,t-,e-

"cscope相关的快捷键映射

"map ff <c-]>
"s:查找即查找C语言符号出现的地方
"nmap fs :cs find s <C-R>=expand("<cword>")<CR><CR>
"g:查找函数、宏、枚举等定义的位置
"nmap fg :cs find g <C-R>=expand("<cword>")<CR><CR>
"c:查找光标下的函数被调用的地方
"nmap fc :cs find c <C-R>=expand("<cword>")<CR><CR>
"t: 查找指定的字符串出现的地方
"nmap ft :cs find t <C-R>=expand("<cword>")<CR><CR>
"e:egrep模式查找,相当于egrep功能
"nmap fe :cs find e <C-R>=expand("<cword>")<CR><CR>
"f: 查找文件名,相当于lookupfile
"nmap fn :cs find f <C-R>=expand("<cfile>")<CR><CR>
"i: 查找当前文件名出现过的地方
"nmap fi :cs find i <C-R>=expand("<cfile>")<CR><CR>
"d: 查找本当前函数调用的函数
"nmap fd :cs find d <C-R>=expand("<cword>")<CR><CR>



let Tlist_Show_One_File=1    " 只展示一个文件的taglist
let Tlist_Exit_OnlyWindow=1  " 当taglist是最后以个窗口时自动退出
let Tlist_Use_Right_Window=1 " 在右边显示taglist窗口
" tag按名字排序"
"let Tlist_Sort_Type="name"   
let Tlist_Auto_Open = 0
let Tlist_Enable_Fold_Column = 1
let Tlist_Inc_Winwidth = 1
let Tlist_WinHeight = 5
let Tlist_WinWidth = 29

""""""""""""""""""""""""""""""  
" miniBufexplorer Config  
""""""""""""""""""""""""""""""  
"let g:miniBufExplMapWindowNavVim = 1 
"let g:miniBufExplMapWindowNavArrows = 1 
"let g:miniBufExplMapCTabSwitchBufs = 1 
"let g:miniBufExplModSelTarget = 1

"let g:bufExplorerMaxHeight=30
"let g:miniBufExplorerMoreThanOne=0


"let g:syntastic_cpp_checkers = ['cpplint', 'cppcheck', 'gcc', 'pc_lint', 'clang_check']
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_cpp_compiler = 'clang++'  "change the compiler to g++ to support c++11. 
"let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++' "set the options of g++ to suport 


"--------------SrcExpl setting--------------
" // The switch of the Source Explorer                                         " 
 nmap <F8> :SrcExplToggle<CR> 
"                                                                              " 
" // Set the height of Source Explorer window                                  " 
 let g:SrcExpl_winHeight = 5 
"                                                                              " 
" // Set 100 ms for refreshing the Source Explorer                             " 
 let g:SrcExpl_refreshTime = 10 
"                                                                              " 
" // Set "Enter" key to jump into the exact definition context                 " 
 let g:SrcExpl_jumpKey = "<ENTER>" 
"                                                                              " 
" // Set "Space" key for back from the definition context                      " 
 let g:SrcExpl_gobackKey = "<SPACE>" 

" // Do not let the Source Explorer update the tags file when opening          " 
 let g:SrcExpl_isUpdateTags = 0 

" // In order to avoid conflicts, the Source Explorer should know what plugins " 
" // except itself are using buffers. And you need add their buffer names into " 
" // below listaccording to the command ":buffers!"                            " 
 let g:SrcExpl_pluginList = [ 
         \ "__Tag_List__", 
         \ "NERD_tree" ,
         \"Source_Explorer"
     \ ] 

"---------omnicppcomplete set-----------
"set tags+=/home/zsl/windows/gitIphy/tags
set tags+=/mnt/shared/src/tags
set completeopt=menu,menuone  
let OmniCpp_MayCompleteDot=1  
let OmniCpp_MayCompleteArrow=1
let OmniCpp_MayCompleteScope=1
let OmniCpp_NamespaceSearch=1
let OmniCpp_GlobalScopeSearch=1  
let OmniCpp_DefaultNamespace=["std"]  
let OmniCpp_ShowPrototypeInAbbr=1
let OmniCpp_SelectFirstItem = 2
let OmniCpp_DisplayMode = 1

"状态栏的设置
set laststatus=2     "显示状态栏，默认为1，不显示。  
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
"let g:airline#extensions#tabline#enabled = 1  "顶端显示当前文件名
"let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_detect_crypt=1
let g:airline_detect_spell=1
let g:airline_inactive_collapse=1
let g:airline_theme='airlineish'

" unicode symbols
"  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
"  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.crypt = ''
  let g:airline_symbols.linenr = '␊'
"  let g:airline_symbols.linenr = '␤'
"  let g:airline_symbols.linenr = '¶'
"  let g:airline_symbols.maxlinenr = '☰'
  let g:airline_symbols.maxlinenr = ''

  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
"  let g:airline_symbols.paste = 'Þ'
"  let g:airline_symbols.paste = '∥'
"  let g:airline_symbols.spell = 'Ꞩ'
  let g:airline_symbols.notexists = '∄'
  let g:airline_symbols.whitespace = 'Ξ'

 " powerline symbols
"  let g:airline_left_sep = ''
 " let g:airline_left_alt_sep = ''
  "let g:airline_right_sep = ''
  "let g:airline_right_alt_sep = ''
  "let g:airline_symbols.branch = ''
  "let g:airline_symbols.readonly = ''
  "let g:airline_symbols.linenr = ''

  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
  let g:airline#extensions#syntastic#enabled = 1

  "let g:airline#extensions#csv#enabled = 1
  "let g:airline#extensions#csv#column_display = 'Name'

  "let g:airline#extensions#ctrlp#color_template = 'normal'
  "let g:airline#extensions#ctrlp#color_template = 'visual'
  "let g:airline#extensions#ctrlp#color_template = 'replace'

  "let g:airline#extensions#eclim#enabled = 1
  "let g:airline#extensions#whitespace#enabled = 1

  "let airline#extensions#tmuxline#color_template = 'insert'
  "let airline#extensions#tmuxline#color_template = 'visual'
  "let airline#extensions#tmuxline#color_template = 'replace'

set encoding=utf-8
colorscheme peachpuff 

set background=dark
"set paste



